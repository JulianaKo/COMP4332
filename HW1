#Q1
#1 obtain Student List
lines = str.split("\n")
sList = {}
for i in range(int(lines[0])):
      sList[i] = lines[i+1].split(" ")

#2 wrire Average File
for i in range (len(sList)):
      average = int(sList[i][1]) + int(sList[i][2]) + int(sList[i][3])
      average /= 3
      average = round(average,2)
      sList[i].append(average)

#3 viewLowScoreStudentFile
count = 0
lowScore = {}
for i in range(len(sList)):
      for j in range(1,4):
            if (int(sList[i][j])<50):
                  count += 1
                  lowScore[count] = sList[i]
                  break
lowScore[0] = count

#Q2 Describe SQL/NoSQL Statements
#(a) SQL: Paid Movie Watching Scenario
#user (uid, uname, bdate)
#movoe (mid, mname, type)
#watch (mid, uid, wdate, charge)

(i)   Find the names of all users who watched the movie with the name "The Post"
(ii)  Find the ID and names of all movies which geneate revenue greater than or equal to 1000000
      , where revenue is defined by the total charge paid by all users to watch the movie

#Q3 Write SQL Codes using scenario 2(a)
#(a) For each user, find the average charge they paid for a movie
select W.uid, avg (W.charge)
from watch W
group by W.uid;

#(b) Find mid, mname watched by user named 'Raymond', from '2018-02-03 09:00:00' to '2018-02-17 17:00:00'
select M.mid, M.mname
from user U, movie M, watch W
where U.uname = 'Raymond'
      W.wdate >= '2018-02-03 09:00:00'
      W.wdate <= '2018-02-17 17:00:00'
      U.uid = W.uid
      M.mid = W.mid;

#(c) Find the names of all users who have watched all movies with names starting with 'Star Wars'
create view StarWars
as
( select M.mid
  from movie M
  where M.mname like 'Star Wars%');

create view TempTable
as
( select S.mid, W.uid
  from StarWars S left join watch W
  on S.mid = W.mid);

select U.name
from TempTable T, user U
where T.uid = U.uid
group by T.uid, U.uname
having count (*) = (select count(*)
                    from StarWars);

drop view TempTable;
drop view StarWars;

#Q4 NoSQL
#(a) Average Amount of Money Paid for Each User
db.user.aggregate(
[{"$lookup: {
            from: "watch",
            localField: "uid",
            foreignField: "uid",
            as: "user_charge"
            }
 },
 {$unwind: "user_charge"}
 {$group: {_id:"$charge", avgCharge: {$avg:1}}}
 {$project: {
            _id:0,
            uid:1,
            avgCharge:1,
            }
 }
 ]);
            

#(b)
db.movie.aggregate([
 {$unwind: "user_charge"}
      {$match:{$and: [{birthday1: {$gte: new Date("2018-02-03T09:00:00Z")}}, {birthday1: {$lte: new Date("2018-02-17T17:00:00Z")}}}},
      {$match:{uname:"Raymond"}},
      {$project:{mid:1, mname:1, _id:0}}
])

(c)
db.student.aggregate([
      {$match:{$mname: "Star Wars%"}}
      {$project:{uname:1, _id:0}}
])
])
